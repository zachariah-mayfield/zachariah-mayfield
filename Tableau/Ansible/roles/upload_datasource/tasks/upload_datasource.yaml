##
- name: Initialize an empty list to store project datasource content
  ansible.builtin.set_fact:
    Project_Datasource_Content: []
  delegate_to: localhost
  run_once: true

- name: Reset page size and page number
  ansible.builtin.set_fact:
    pageSize: 1000
    pageNumber: 1
    has_more_pages: true

- name: List datasources
  ansible.builtin.uri:
    url: "https://{{ TableauServerName }}/api/{{ Tableau_API_Version }}/sites/{{ Tableau_Site_ID }}/datasources?pageSize={{ pageSize }}&pageNumber={{ pageNumber }}&filter=projectName:eq:{{ Project_Name }}&fields=_all_"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Tableau-Auth: "{{ hostvars['localhost'].Tableau_Authentication_Token }}"
    validate_certs: false
    return_content: true
    use_proxy: false
    follow_redirects: all
  register: Project_Datasource_Content_response
  failed_when: Project_Datasource_Content_response.status != 200
  until: Project_Datasource_Content_response.json.datasources.datasource | length < pageSize
  retries: 5
  delay: 2
  when: Tableau_Authentication_Token is defined

- name: Append Project Datasource Content to the list
  ansible.builtin.set_fact:
    Project_Datasource_Content: "{{ Project_Datasource_Content + (Project_Datasource_Content_response.json.datasources.datasource  | default([])) }}"
    pageNumber: "{{ pageNumber + 1 }}"
  delegate_to: localhost
  run_once: true
  when: Project_Datasource_Content_response.json.datasources.datasource | length > 0
  # when: Project_Datasource_Content_response.json.datasources.datasource | length > 0 and Project_Datasource_Content_response.json.datasources.datasource is defined 


- name: Set Project Datasource Content fact(s)
  ansible.builtin.set_fact:
    Project_Datasource_Content_Info: "{{ Project_Datasource_Content_Info | default([])) + [{'Project_Datasource_Content_Name': Project_Datasource_Content_Name, 'Project_Datasource_Content_ID': Project_Datasource_Content_ID, 'Project_Datasource_Content_Project_ID': Project_Datasource_Content_Project_ID}] }}"
  loop: "{{ Project_Datasource_Content_response }}"
  vars:
    Project_Datasource_Content_Name: "{{ item.name }}"
    Project_Datasource_Content_ID: "{{ item.id }}"
    Project_Datasource_Content_Project_ID: "{{ item.project.id }}"
  delegate_to: localhost
  run_once: true
  when: Project_Datasource_Content_response.json.datasources.datasource | length == 0 and Project_Datasource_Content_response.json.datasources.datasource is defined


- name: Download each Datasource
  ansible.builtin.uri:
    url: "https://{{ TableauServerName }}/api/{{ Tableau_API_Version }}/sites/{{ Tableau_Site_ID }}/datasources/{{ item.id }}/content"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Tableau-Auth: "{{ hostvars['localhost'].Tableau_Authentication_Token }}"
    dest: "{{ PlayBook_Dir }}/downloaded_content/{{ item.name }}_Datasource.tdsx"
    validate_certs: false
    return_content: true
    use_proxy: false
    follow_redirects: all
  loop: "{{ Project_Datasource_Content }}"
  register: Download_Project_Datasource_Content_response
  failed_when: Download_Project_Datasource_Content_response.status != 200
  until: Download_Project_Datasource_Content_response.json.datasources.datasource 
  retries: 5
  delay: 2


# Tablesu  API Reference: https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref_data_source.htm#publish_data_source

# This gets a HTTP Error 406 
- name: V1  -  Upload each Datasource
  ansible.builtin.uri:
    url: "https://{{ TableauServerName }}/api/{{ Tableau_API_Version }}/sites/{{ Tableau_Site_ID }}/datasources"
    method: GET
    headers:
      X-Tableau-Auth: "{{ hostvars['localhost'].Tableau_Authentication_Token }}"
      Content-Type: "multipart/mixed" #; boundary=boundary-string
    body_format: form-multipart
    body: 
      request_payload:
        # "{{ lookup('file', PlayBook_Dir + '/downloaded_content/' + 'datasource.xml') }}"
        content: "{{ lookup('file', {{ PlayBook_Dir }} + '/downloaded_content/Datasource.xml') }}"
        file_name: datasource.xml
        mime_type: application/xml
      tableau_datasource:
        # "{{ lookup('file', PlayBook_Dir + '/downloaded_content/' + item.Project_Datasouce_Content_Name + '_Datasource.tdsx') }}"
        content: "{{ lookup('file', {{ PlayBook_Dir }}/downloaded_content/DataSourceName_Datasource.tdsx) }}"
        file_name: "DataSourceName_Datasource.tdsx"
        mime_type: application/octet-stream
    validate_certs: false
    return_content: true
    use_proxy: false
    follow_redirects: all
  loop: "{{ Project_Datasource_Content }}"
  register: Upload_Project_Datasource_Content_response
  failed_when: Upload_Project_Datasource_Content_response.status != 200
  until: Upload_Project_Datasource_Content_response.json.datasources.datasource 
  retries: 5
  delay: 2



- name: V2 -  Upload each Datasource
  command: >
    curl  "https://{{ TableauServerName }}/api/{{ Tableau_API_Version }}/sites/{{ Tableau_Site_ID }}/datasources" \
    -X POST \ 
    -H "X-Tableau-Auth: "{{ hostvars['localhost'].Tableau_Authentication_Token }}" \
    -H "Content-Type: multipart/mixed;" \
    -F "request_payload=@{{ PlayBook_Dir }}/downloaded_content/datasource.xml" \
    -F "tableau_datasource=@{{ PlayBook_Dir }}/downloaded_content/DataSourceName_Datasource.tdsx"
  args:
    chdir: "{{ PlayBook_Dir }}/downloaded_content"
  register: Upload_Project_Datasource_Content_response


















